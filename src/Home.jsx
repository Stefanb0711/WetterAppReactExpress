import React, {useEffect, useState} from "react";import axios from "axios";import Header from "./Header.jsx";import WeatherCard from "./WeatherCard.jsx";import WeatherForecastCards from "./WeatherForecastCard.jsx";import WeatherForecastCard from "./WeatherForecastCard.jsx";function Home(){    const [weatherData, setWeatherData] = useState({        oneWordDescription : "",        description : "",        temp : "",        humidity : "",        icon : ""    });    const [error, setError] = useState(false);    const [loading, setLoading] = useState(true);    const [currentCity, setCurrentCity] = useState("");    const [noData, setNoData] = useState(true);    const [coordinates, setCoordinates] = useState({lat: null, long: null});    const [forecastData, setForecastData] = useState([]);    const apiKey = "e8abe8733cbb04043b9c0df08f1a617d";    const url = `https://api.openweathermap.org/data/2.5/weather?q=${currentCity}&appid=${apiKey}&units=metric&lang=de`;    useEffect(() =>{        async function fetchWeather(){            try{            const response = await axios.get(url);            //setWeatherData(response.data);            //setLoading(false);            if (response.status >= 200 && response.status < 300) {                const oneWordDescription = response.data["weather"][0]["main"];                const description = response.data["weather"][0]["description"];                const temp = response.data["main"]["temp"];                const humidity = response.data["main"]["humidity"];                const icon = "https://openweathermap.org/img/wn/" + response.data["weather"][0]["icon"] + ".png";                if (response.data === []){                    setError(true);                    return;                }                 const { lat, lon } = response.data["coord"];                setCoordinates({lat : lat, long : lon});                setWeatherData({                    oneWordDescription: oneWordDescription,                    description: description,                    temp: temp,                    humidity : humidity,                    icon: icon                });                setNoData(false);            } else {                setError(true);            }            } catch(err){                console.error(err);                setLoading(false);                //setError(true);            }        }        //setNoData(false);        fetchWeather();    }, [currentCity]);    /*    useEffect(() => {        if (coordinates.lat && coordinates.long) {        console.log("Coordinates: ", coordinates["lat"]);        console.log("Coordinates: ", coordinates["long"]);            const weatherForecastURL = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${coordinates["lat"]}&lon=${coordinates["long"]}&cnt=5&appid=${apiKey}`;            if (weatherData["oneWordDescription"] === "") {                setNoData(true);            }            async function getForecastData() {                try {                    const response = await axios.get(weatherForecastURL);                    if (response.data.length > 0) {                        setForecastData(response.data);                        console.log("Datum eines Elements in der Liste: ", forecastData["list"][0]["dt"]);                    }                } catch (err) {                    throw new Error("Fetching Weatherforecast not succeded");                    return null;                }            }                getForecastData();            }    }, [coordinates]);*/    function selectCity(searchSuggName){        console.log("Ausgewählte Stadt: ", searchSuggName);        setCurrentCity(searchSuggName);        //axios.get("");    }    if (loading) return <div>Loading...</div>;    //if (error) return <div> Fehler beim laden der Stadt. Überprüfen Sie ihren Suchbegriff.</div>    if (noData) return (<div className="m-auto" style={{textAlign: "center", justifyContent: "center" }}>        <Header selectCity={selectCity}/>        <h1 style={{marginLeft: "40px", marginBottom: "20px"}}>Meine Wetterapp</h1>        <div>Geben Sie eine Stadt in der Suchleiste ein für Wetterinformationen.</div>    </div>)    return (        <div>            <Header selectCity={selectCity}/>            <h1 style={{marginLeft: "40px", marginBottom: "20px"}}>Meine Wetterapp</h1>            {error ? <div className="m-auto"> Fehler beim laden der Stadt. Überprüfen Sie ihren Suchbegriff.</div> :                <div style={{marginLeft: "40px"}}>                    <WeatherCard                        city={currentCity}                        title={weatherData["oneWordDescription"]}                        icon={weatherData["icon"]}                        description={weatherData["description"]}                        temperature={weatherData["temp"]}                        humidity={weatherData["humidity"]}                    />                </div>            }        </div>    );}export default Home;